{"version":3,"sources":["serviceWorker.js","reducers/todoReducer.js","components/List/index.js","components/Todos/index.js","components/SignIn/index.js","components/SignOut/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","todoReducer","state","event","nextState","IDLE","fetch","status","isInputDisabled","create","update","delete","CREATING","reject","error","NOENTCREATING","UPDATING","noent","noEntQuery","isCompleted","DELETING","LOADING","resolve","data","FAILURE","type","undefined","List","props","map","elem","todoTitle","id","_id","Button","onClick","setUpdateId","dispatch","variant","size","className","setRemoveId","Todos","useReducer","useState","todoData","setTodoData","updateId","removeId","query","setQuery","useEffect","newTodos","concat","uuidv4","todo","Object","assign","filter","remove","Row","Col","xs","Form","onSubmit","evt","preventDefault","Control","disabled","required","placeholder","onChange","target","value","Table","bordered","hover","INITIALSTATE","email","password","SignInFormBase","userInfo","setUserInfo","name","isInvalid","setUser","autoComplete","message","SignInPage","SignOutBar","Navbar","bg","App","user","ProtectedTodos","Component","component","rest","render","to","ProtectedSignin","Container","SignOut","exact","path","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0201f559.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function todoReducer(state, event) {\n  const NEXTSTATE = {\n      IDLE: {\n          fetch:  {\n              ...state,\n              status:  'LOADING',\n              isInputDisabled: true \n          }, \n          create: { \n              ...state,\n              status:  'CREATING',\n              isInputDisabled: true \n          },\n          update: {\n              ...state,\n              status:  'UPDATING',\n              isInputDisabled: true \n          },\n          delete: {\n              ...state,\n              status:  'DELETING',\n              isInputDisabled: true \n          }\n      },\n\n      CREATING: {\n          fetch:  {\n              ...state,\n              status:  'LOADING',\n          }, \n          reject:  {\n              ...state,\n              status: 'FAILURE',\n              error: event.error\n          }\n      },\n\n      NOENTCREATING: {\n          fetch:  {\n              ...state,\n              status:  'LOADING'\n          }, \n          reject:  {\n              ...state,\n              status: 'FAILURE',\n              error: event.error\n          }\n \n      },\n \n      UPDATING: {\n          fetch:  {\n              ...state,\n              status:  'LOADING',\n          }, \n          noent:  {\n              ...state,\n              status:     'NOENTCREATING',\n              noEntQuery:  event.noEntQuery,\n              isCompleted: event.isCompleted\n          },\n          reject:  {\n              ...state,\n              status: 'FAILURE',\n              error: event.error\n          }\n     },\n\n      DELETING: {\n          fetch:  {\n              ...state,\n              status:  'LOADING'  \n          }, \n          reject:  {\n              ...state,\n              status: 'FAILURE',\n              error: event.error\n          }\n      },\n\n      LOADING: {\n          resolve: {\n              ...state,\n              status: 'IDLE',\n              data: event.data,\n              isInputDisabled: false\n          },\n          reject:  {\n              ...state,\n              status: 'FAILURE',\n              error: event.error\n\n          }\n      },\n\n      FAILURE: {}\n};\n\n    const nextState = NEXTSTATE[state.status][event.type];\n    return nextState !== undefined ? nextState : state;\n}\n\n\nexport default todoReducer;\n\n","import React     from 'react';\nimport Button    from 'react-bootstrap/Button';\n\nconst List = props => {\n    let list;\n    if(props.data !== undefined || props.data.data !== null) {\n      list =  props.data.map(elem => {\n          let todoTitle = !elem.isCompleted ? elem.data : <strike><b>{elem.data}</b></strike>;\n          let id = elem._id;\n       return  (\n        <tr key={'key-'+elem._id}>\n          <td>{todoTitle}\n           <Button\n           onClick={() => {\n                           props.setUpdateId(id);\n                           props.dispatch({type: \"update\"});\n                         }}\n             variant=\"info\"\n             size=\"sm\"\n             className=\"float-right ml-2\">\n             Complete\n           </Button> \n           <Button\n             onClick={() => {\n                 props.setRemoveId(id);\n                 props.dispatch({type: \"delete\"});\n              }\n             }\n             variant=\"danger\"\n             size=\"sm\"\n             className=\"float-right\">\n             Delete\n           </Button>\n         </td>\n        </tr>);\n      });\n    } else {\n       list = null;\n    }\n    return list;\n};\n\nexport default List;\n","import   React                                  from 'react';\nimport { useState, useEffect, useReducer}       from 'react';\nimport { v4 as uuidv4 }                         from 'uuid';\n\nimport   todoReducer                            from '../../reducers/todoReducer.js';\n\nimport Row                                      from 'react-bootstrap/Row';\nimport Col                                      from 'react-bootstrap/Col';\nimport Form                                     from 'react-bootstrap/Form';\nimport Table                                    from 'react-bootstrap/Table';\nimport Button                                   from 'react-bootstrap/Button';\n\nimport List                                     from  '../List/';\n\nfunction Todos() {\n  const   initialState        = {\n                                     status: \"LOADING\",\n                                     data: [],\n                                     error: null,\n                                     id: null,\n                                     noEntQuery: null,\n                                     isCompleted: false,\n                                     isInputDisabled: true \n  };\n\n  const [ state, dispatch ]              = useReducer(todoReducer, initialState);\n  const [ todoData, setTodoData]     = useState([]); \n  const [ updateId, setUpdateId]     = useState(''); \n  const [ removeId, setRemoveId]     = useState(''); \n  const [ query, setQuery ]          = useState('');\n   \n  useEffect(() => {\n      \n   function create() {\n    let newTodos =  todoData.concat([{_id: uuidv4() ,data: query, isCompleted: false}]);\n    setTodoData(newTodos);\n    setQuery('');\n    dispatch({type: 'fetch'});\n   }\n\n// Not implemented\n   function noEntCreate() {\n    dispatch({type: 'failure'});\n   }\n\n    function read() {\n     const data = todoData;  \n     dispatch({type: 'resolve',  data});\n    }\n\n   function update() {\n     let newTodos = todoData.map( todo => {\n       if(todo._id === updateId) {\n         return Object.assign(todo, {isCompleted: !todo.isCompleted});\n       };\n         return todo;\n     });\n     setTodoData(newTodos);\n     dispatch({type: 'fetch'});\n    // error, not implemented: from this error => noEntCreate (IDK if it is possible)  \n   }\n\n  function remove() {\n      let newTodos = todoData.filter(todo => todo._id !== removeId);   \n      setTodoData(newTodos);\n      dispatch({type: 'fetch'});\n  }\n\n   // CREATE   \n   if(state.status === 'CREATING' ) {\n     create();\n   }\n\n   if(state.status === 'NOENTCREATING' ) {\n     noEntCreate();\n   }\n      \n   // READ\n   if(state.status === 'LOADING') {\n     read();\n   }\n\n      \n   // UPDATE \n   if(state.status === 'UPDATING' ) {\n      update();\n   }\n\n   // DELETE\n   if(state.status === 'DELETING' ) {\n      remove();\n   }\n\n  }, [state.status]);\n   \n  const handleSubmit = evt => {\n     evt.preventDefault();\n     dispatch({type:\"create\", query});\n  };\n\n     return (\n   <Row >\n      <Col xs={12} className=\"mt-5\">\n          <h1 >To do app</h1>\n          <Form\n           className=\"mt-2\"\n           onSubmit={handleSubmit}\n           >\n         <Form.Control\n           disabled={state.isInputDisabled}\n           type=\"text\"\n           required\n           placeholder=\"What needs to be done?\"\n           onChange={evt => setQuery(evt.target.value)}\n           value={query}\n\n         />\n         <Button\n          className=\"mt-2 float-right\"\n          variant=\"primary\"\n          type=\"submit\">\n            Add Todo \n         </Button>\n       </Form>\n     </Col>\n     <Col>\n        <Table bordered hover className=\"mt-5\" >\n          <tbody>\n             <List\n                  data={state.data}\n                  dispatch={dispatch}\n                  setUpdateId={setUpdateId}\n                  setRemoveId={setRemoveId}\n             />\n          </tbody>\n        </Table>\n    </Col>\n   </Row>\n    );\n\n};\n\nexport default Todos;\n","import   React                  from 'react';\nimport { useState            }  from 'react';\n\nimport Row                      from 'react-bootstrap/Row';\nimport Col                      from 'react-bootstrap/Col';\nimport Form                     from 'react-bootstrap/Form';\nimport Button                   from 'react-bootstrap/Button';\n\nconst INITIALSTATE = {\n  email: '',\n  password: '',\n};\n\n\n/*\n AT THE MOMENT THIS IS ONLY TO SHOW A COMPONENT, \n THIS IS NOT WORKING\n*/\nconst SignInFormBase = (props) => {\n  const [userInfo, setUserInfo] = useState(INITIALSTATE);\n  const [error ] = useState(null);\n\n  const onSubmit = event => {\n    event.preventDefault();\n    props.setUser(true);\n  };\n\n  const onChange = event => {\n    const {name, value} = event.target;\n      setUserInfo((userInfo) => ({...userInfo, [name]: value}));\n  };\n\n  const isInvalid = userInfo.password === '' || userInfo.email === '';\n  return (\n      <Form\n        onSubmit={onSubmit}>\n      <Form.Control\n        className=\"mb-2\"\n        name=\"email\"\n        autoComplete=\"off\"\n        value={userInfo.email}\n        onChange={onChange}\n        type=\"text\"\n        placeholder=\"Email Address\"\n      />\n      <Form.Control\n        name=\"password\"\n        autoComplete=\"off\"\n        value={userInfo.password}\n        onChange={onChange}\n        type=\"password\"\n        placeholder=\"Password\"\n      />\n        <Button\n          className=\"mt-2 float-right\"\n          disabled={isInvalid}\n          type=\"submit\"\n        >\n        Sign In\n      </Button>\n      {error && <p>{error.message}</p>}\n    </Form>\n  );\n}\n\n\n\nconst SignInPage = props => (\n <Row>\n   <Col >\n     <div>\n       <h1 className=\"text-center mb-5\">Sign In</h1>\n        <SignInFormBase setUser={props.setUser}/>\n     </div>\n  </Col>\n  </Row>\n);\n\n\nexport default SignInPage;\n\n","import React from 'react';\n\nimport Row                                      from 'react-bootstrap/Row';\nimport Col                                      from 'react-bootstrap/Col';\nimport Button                                   from 'react-bootstrap/Button';\nimport Navbar                                   from 'react-bootstrap/Navbar';\n\nconst SignOutBar = (props) => (\n  <Row>\n     <Col className=\"mb-5\" >\n        <Navbar\n           bg=\"primary\"\n           >\n        <Button\n          variant=\"outline-light\"\n          onClick={() => props.setUser(false) }\n        >\n        Sign Out\n       </Button>\n     </Navbar>\n    </Col>\n  </Row>\n  );\n\nexport default  SignOutBar;\n","import   React                                  from 'react';\nimport { useState, useEffect }                  from 'react';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container                                 from 'react-bootstrap/Container';\n\nimport   Todos                                   from '../Todos';\nimport   SignInPage                              from '../SignIn';\nimport   SignOutBar                              from '../SignOut';\n\nfunction  App(props) {\n\n   const [ user, setUser ] = useState('loading'); \n\n   useEffect(() => {\n       setUser(true);\n   },[]);\n    \n/* https://dev.to/mychal/protected-routes-with-react-function-components-dh */\n   const ProtectedTodos = ({ component: Component, ...rest }) => {\n     return (\n        <Route\n                {...rest}\n                render={\n                    props => {\n                        if( user === 'loading' ){\n                            return null;\n                        } else if(user === true) {\n                           return <Component {...rest} {...props} />;\n                        } else {\n                          return  <Redirect  to=\"signin\" />;\n                        }\n                    }\n                }\n         />\n     );\n   };\n\n   const ProtectedSignin = ({ component: Component, ...rest }) => {\n     return (\n       <Route\n                {...rest}\n                render={\n                    props => {\n                        if( user === 'loading' ){\n                            return null;\n                        } else if( user === false ){\n                           return <Component {...rest} {...props} />;\n                        } else {\n                          return  <Redirect  to=\"/\" />;\n                        }\n                    }\n                }\n         />\n     );\n   };\n \n   \n    return(\n <Container>\n     <Router >\n       <SignOutBar setUser={setUser} /> \n       <Switch>\n            <ProtectedSignin\n                exact path='/signin'\n                user={user}\n                setUser={setUser}\n                component={SignInPage} />\n            <ProtectedTodos\n                exact path='/'\n                user={user}\n                component={Todos} />\n      </Switch>\n     </Router>       \n </Container>  \n    );\n}\n\nexport default App; \n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}